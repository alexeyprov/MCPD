//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[Serializable()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[System.Xml.Serialization.XmlRootAttribute("Friends")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class Friends : System.Data.DataSet {
    
    private PeopleDataTable tablePeople;
    
    private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public Friends() {
        this.BeginInit();
        this.InitClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected Friends(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            if ((ds.Tables["People"] != null)) {
                base.Tables.Add(new PeopleDataTable(ds.Tables["People"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public PeopleDataTable People {
        get {
            return this.tablePeople;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.BrowsableAttribute(true)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override System.Data.DataSet Clone() {
        Friends cln = ((Friends)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["People"] != null)) {
                base.Tables.Add(new PeopleDataTable(ds.Tables["People"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.tablePeople = ((PeopleDataTable)(base.Tables["People"]));
        if ((initTable == true)) {
            if ((this.tablePeople != null)) {
                this.tablePeople.InitVars();
            }
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "Friends";
        this.Prefix = "";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        this.tablePeople = new PeopleDataTable();
        base.Tables.Add(this.tablePeople);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializePeople() {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
        Friends ds = new Friends();
        System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
        System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
        xs.Add(ds.GetSchemaSerializable());
        System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        return type;
    }
    
    public delegate void PeopleRowChangeEventHandler(object sender, PeopleRowChangeEvent e);
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class PeopleDataTable : System.Data.DataTable, System.Collections.IEnumerable {
        
        private System.Data.DataColumn columnName;
        
        private System.Data.DataColumn columnDoB;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PeopleDataTable() {
            this.TableName = "People";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal PeopleDataTable(System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PeopleDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn NameColumn {
            get {
                return this.columnName;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn DoBColumn {
            get {
                return this.columnDoB;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PeopleRow this[int index] {
            get {
                return ((PeopleRow)(this.Rows[index]));
            }
        }
        
        public event PeopleRowChangeEventHandler PeopleRowChanging;
        
        public event PeopleRowChangeEventHandler PeopleRowChanged;
        
        public event PeopleRowChangeEventHandler PeopleRowDeleting;
        
        public event PeopleRowChangeEventHandler PeopleRowDeleted;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddPeopleRow(PeopleRow row) {
            this.Rows.Add(row);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PeopleRow AddPeopleRow(string Name, string DoB) {
            PeopleRow rowPeopleRow = ((PeopleRow)(this.NewRow()));
            rowPeopleRow.ItemArray = new object[] {
                    Name,
                    DoB};
            this.Rows.Add(rowPeopleRow);
            return rowPeopleRow;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataTable Clone() {
            PeopleDataTable cln = ((PeopleDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataTable CreateInstance() {
            return new PeopleDataTable();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnName = base.Columns["Name"];
            this.columnDoB = base.Columns["DoB"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnName);
            this.columnDoB = new System.Data.DataColumn("DoB", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnDoB);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PeopleRow NewPeopleRow() {
            return ((PeopleRow)(this.NewRow()));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
            return new PeopleRow(builder);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Type GetRowType() {
            return typeof(PeopleRow);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.PeopleRowChanged != null)) {
                this.PeopleRowChanged(this, new PeopleRowChangeEvent(((PeopleRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.PeopleRowChanging != null)) {
                this.PeopleRowChanging(this, new PeopleRowChangeEvent(((PeopleRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.PeopleRowDeleted != null)) {
                this.PeopleRowDeleted(this, new PeopleRowChangeEvent(((PeopleRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.PeopleRowDeleting != null)) {
                this.PeopleRowDeleting(this, new PeopleRowChangeEvent(((PeopleRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovePeopleRow(PeopleRow row) {
            this.Rows.Remove(row);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            Friends ds = new Friends();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "PeopleDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            return type;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class PeopleRow : System.Data.DataRow {
        
        private PeopleDataTable tablePeople;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal PeopleRow(System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablePeople = ((PeopleDataTable)(this.Table));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name {
            get {
                try {
                    return ((string)(this[this.tablePeople.NameColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'People\' is DBNull.", e);
                }
            }
            set {
                this[this.tablePeople.NameColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string DoB {
            get {
                try {
                    return ((string)(this[this.tablePeople.DoBColumn]));
                }
                catch (System.InvalidCastException e) {
                    throw new System.Data.StrongTypingException("The value for column \'DoB\' in table \'People\' is DBNull.", e);
                }
            }
            set {
                this[this.tablePeople.DoBColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNameNull() {
            return this.IsNull(this.tablePeople.NameColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNameNull() {
            this[this.tablePeople.NameColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDoBNull() {
            return this.IsNull(this.tablePeople.DoBColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDoBNull() {
            this[this.tablePeople.DoBColumn] = System.Convert.DBNull;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class PeopleRowChangeEvent : System.EventArgs {
        
        private PeopleRow eventRow;
        
        private System.Data.DataRowAction eventAction;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PeopleRowChangeEvent(PeopleRow row, System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PeopleRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
