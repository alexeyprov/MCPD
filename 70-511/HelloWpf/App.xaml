<Application x:Class="HelloWpf.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/PresentationFramework.Luna, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35;component/Themes/luna.metallic.xaml" />
                <ResourceDictionary Source="/CustomUI;component/Resources.xaml" />
                <ResourceDictionary Source="/CustomUI;component/CustomWindowResources.xaml" />
            </ResourceDictionary.MergedDictionaries>
            
            <Style x:Key="EditorLabel">
                <Setter Property="FrameworkElement.Margin" Value="5" />
                <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right" />
            </Style>
            <Style TargetType="Control" x:Key="EditorField" BasedOn="{StaticResource ErrorTooltip}">
                <Setter Property="Margin" Value="5 5 10 5" />
            </Style>
            
            <Style TargetType="Popup" x:Key="AutomaticPopup">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Tag.IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true">
                        <Setter Property="IsOpen" Value="true" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- List box style: radio button list -->
            <Style TargetType="ListBox" x:Key="RadioButtonList">
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="ListBoxItem">
                            <Setter Property="Margin" Value="2"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <RadioButton 
                                            Focusable="False"
                                            IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}">
                                            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" 
                                                                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" 
                                                                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
                                                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                                        </RadioButton>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <!-- List box item style: fancy -->
            <Style TargetType="ListBoxItem" x:Key="FancyListBoxItem">
                <Setter Property="ListBoxItem.Background" Value="LightSteelBlue" />
                <Setter Property="ListBoxItem.Margin" Value="5" />
                <Setter Property="ListBoxItem.Padding" Value="5" />
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="true">
                        <Setter Property="Background" Value="DarkRed" />
                        <Setter Property="Foreground" Value="White" />
                        <Setter Property="BorderBrush" Value="Black" />
                        <Setter Property="BorderThickness" Value="3" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <!-- List box style: alternating colors -->
            <Style TargetType="ListBox" x:Key="EvenOddHighlightedList">
                <Setter Property="AlternationCount" Value="2"/>
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource FancyListBoxItem}">
                            <Style.Triggers>
                                <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                    <Setter Property="Background" Value="AliceBlue" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <!-- Button style: animated glass -->
            <GradientStopCollection x:Key="GlassGradientStops">
                <GradientStop Color="WhiteSmoke" Offset="0.2" />
                <GradientStop Color="Transparent" Offset="0.4" />
                <GradientStop Color="WhiteSmoke" Offset="0.5" />
                <GradientStop Color="Transparent" Offset="0.75" />
                <GradientStop Color="WhiteSmoke" Offset="0.9" />
                <GradientStop Color="Transparent" Offset="1" />
            </GradientStopCollection>
            <LinearGradientBrush x:Key="GlassBrush" Opacity="0.75" GradientStops="{StaticResource GlassGradientStops}" />
            <LinearGradientBrush x:Key="GrayBlueBrush" >
                <GradientStop Offset="0" Color="DarkGray"/>
                <GradientStop Offset="0.5" Color="#CCCCFF" />
                <GradientStop Offset="1" Color="DarkGray" />
            </LinearGradientBrush>
            <Style x:Key="AnimatedGlassButton" TargetType="Button">
                <Setter Property="Background" Value="{StaticResource GrayBlueBrush}" />
                <Setter Property="Width" Value="90" />
                <Setter Property="Margin" Value="10" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
                                <!-- Outer Rectangle with rounded corners. -->
                                <Rectangle 
                                x:Name="outerRectangle"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Stroke="{TemplateBinding Background}"
                                RadiusX="20"
                                RadiusY="20" 
                                StrokeThickness="5"
                                Fill="Transparent" />
                                <!-- Inner Rectangle with rounded corners. -->
                                <Rectangle
                                x:Name="innerRectangle"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Stroke="Transparent"
                                RadiusX="20"
                                RadiusY="20"
                                StrokeThickness="20"
                                Fill="{TemplateBinding Background}"
                                />
                                <!-- Glass Rectangle -->
                                <Rectangle 
                                x:Name="glassRectangle"
                                Fill="{StaticResource GlassBrush}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch" 
                                RadiusX="10"
                                RadiusY="10"
                                StrokeThickness="2" 
                                Opacity="0" 
                                RenderTransformOrigin="0.5, 0.5">
                                    <Rectangle.Stroke>
                                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStop Offset="0.0" Color="LightBlue" />
                                                <GradientStop Offset="1.0" Color="Gray" />
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Rectangle.Stroke>
                                    <!-- These transforms have no effect as they are declared here.            The reason the transforms are included is to be targets            for animation (see later). -->
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <RotateTransform />
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                    <!-- A BevelBitmapEffect is applied to give the button a            "Beveled" look. -->
                                    <Rectangle.BitmapEffect>
                                        <BevelBitmapEffect />
                                    </Rectangle.BitmapEffect>
                                </Rectangle>
                                <!-- Present Content (text) of the button. -->
                                <DockPanel Name="myContentPresenterDockPanel">
                                    <ContentPresenter 
                                    x:Name="myContentPresenter"
                                    Margin="20"
                                    Content="{TemplateBinding Content}" 
                                    TextBlock.Foreground="Black" />
                                </DockPanel>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <!-- Set properties when mouse pointer is over the button. -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <!-- Below are three property settings that occur when the          condition is met (user mouses over button).  -->
                                    <!-- Change the color of the outer rectangle when user          mouses over it. -->
                                    <Setter TargetName="outerRectangle" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                    <!-- Sets the glass opacity to 1, therefore, the          glass "appears" when user mouses over it. -->
                                    <Setter TargetName="glassRectangle" Property="Opacity" Value="1" />
                                    <!-- Makes the text slightly blurry as though you          were looking at it through blurry glass. -->
                                    <Setter TargetName="myContentPresenter" Property="BitmapEffect">
                                        <Setter.Value>
                                            <BlurBitmapEffect Radius="1" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <!-- Set properties when button has focus. -->
                                <Trigger Property="IsFocused" Value="True">
                                    <!-- Change the color of the outer rectangle when user          mouses over it. -->
                                    <Setter TargetName="outerRectangle" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                    <!-- Sets the glass opacity to 1, therefore, the          glass "appears" when user mouses over it. -->
                                    <Setter TargetName="glassRectangle" Property="Opacity" Value="1" />
                                </Trigger>
                                <!-- Animations that start when mouse enters and leaves button. -->
                                <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard Name="mouseEnterBeginStoryboard">
                                            <Storyboard>
                                                <!-- This animation makes the glass rectangle shrink in the X direction. -->
                                                <DoubleAnimation
                                                Storyboard.TargetName="glassRectangle"
                                                Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX"
                                                By="-0.1" 
                                                Duration="0:0:0.5" />
                                                <!-- This animation makes the glass rectangle shrink in the Y direction. -->
                                                <DoubleAnimation
                                                Storyboard.TargetName="glassRectangle"
                                                Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                By="-0.1"
                                                Duration="0:0:0.5" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                    <EventTrigger.Actions>
                                        <!-- Stopping the storyboard sets all animated properties back to default. -->
                                        <StopStoryboard BeginStoryboardName="mouseEnterBeginStoryboard" />
                                    </EventTrigger.Actions>
                                </EventTrigger>
                                <!-- Animation fires when button is clicked, causing glass to spin.  -->
                                <EventTrigger RoutedEvent="Button.Click">
                                    <EventTrigger.Actions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation
                                                Storyboard.TargetName="glassRectangle"
                                                Storyboard.TargetProperty="RenderTransform.Children[1].Angle"
                                                By="360"
                                                Duration="0:0:0.5">
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger.Actions>
                                </EventTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
