<Application x:Class="DemoApplication.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    StartupUri="Window1.xaml">
    <Application.Resources>
		<GradientStopCollection x:Key="GlassGradientStops">
			<GradientStop Color="WhiteSmoke" Offset="0.2" />
			<GradientStop Color="Transparent" Offset="0.4" />
			<GradientStop Color="WhiteSmoke" Offset="0.5" />
			<GradientStop Color="Transparent" Offset="0.75" />
			<GradientStop Color="WhiteSmoke" Offset="0.9" />
			<GradientStop Color="Transparent" Offset="1" />
		</GradientStopCollection>
		<LinearGradientBrush x:Key="GlassBrush" Opacity="0.75" GradientStops="{StaticResource GlassGradientStops}" />
		<LinearGradientBrush x:Key="GrayBlueBrush" >
			<GradientStop Offset="0" Color="DarkGray"/>
			<GradientStop Offset="0.5" Color="#CCCCFF" />
			<GradientStop Offset="1" Color="DarkGray" />
		</LinearGradientBrush>
		<Style TargetType="Button">
			<Setter Property="Background" Value="{StaticResource GrayBlueBrush}" />
			<Setter Property="Width" Value="90" />
			<Setter Property="Margin" Value="10" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" ClipToBounds="True">
							<!-- Outer Rectangle with rounded corners. -->
							<Rectangle 
								x:Name="outerRectangle"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Stroke="{TemplateBinding Background}"
								RadiusX="20"
								RadiusY="20" 
								StrokeThickness="5"
								Fill="Transparent" />
							<!-- Inner Rectangle with rounded corners. -->
							<Rectangle
								x:Name="innerRectangle"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Stroke="Transparent"
								RadiusX="20"
								RadiusY="20"
								StrokeThickness="20"
								Fill="{TemplateBinding Background}"
								/>
							<!-- Glass Rectangle -->
							<Rectangle 
								x:Name="glassRectangle"
								Fill="{StaticResource GlassBrush}"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"	
								RadiusX="10"
								RadiusY="10"
								StrokeThickness="2" 
								Opacity="0" 
								RenderTransformOrigin="0.5, 0.5">
								<Rectangle.Stroke>
									<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
										<LinearGradientBrush.GradientStops>
											<GradientStop Offset="0.0" Color="LightBlue" />
											<GradientStop Offset="1.0" Color="Gray" />
										</LinearGradientBrush.GradientStops>
									</LinearGradientBrush>
								</Rectangle.Stroke>
								<!-- These transforms have no effect as they are declared here.            The reason the transforms are included is to be targets            for animation (see later). -->
								<Rectangle.RenderTransform>
									<TransformGroup>
										<ScaleTransform />
										<RotateTransform />
									</TransformGroup>
								</Rectangle.RenderTransform>
								<!-- A BevelBitmapEffect is applied to give the button a            "Beveled" look. -->
								<Rectangle.BitmapEffect>
									<BevelBitmapEffect />
								</Rectangle.BitmapEffect>
							</Rectangle>
							<!-- Present Content (text) of the button. -->
							<DockPanel Name="myContentPresenterDockPanel">
								<ContentPresenter 
									x:Name="myContentPresenter"
									Margin="20"
									Content="{TemplateBinding Content}" 
									TextBlock.Foreground="Black" />
							</DockPanel>
						</Grid>
						<ControlTemplate.Triggers>
							<!-- Set properties when mouse pointer is over the button. -->
							<Trigger Property="IsMouseOver" Value="True">
								<!-- Below are three property settings that occur when the          condition is met (user mouses over button).  -->
								<!-- Change the color of the outer rectangle when user          mouses over it. -->
								<Setter TargetName="outerRectangle" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								<!-- Sets the glass opacity to 1, therefore, the          glass "appears" when user mouses over it. -->
								<Setter TargetName="glassRectangle" Property="Opacity" Value="1" />
								<!-- Makes the text slightly blurry as though you          were looking at it through blurry glass. -->
								<Setter TargetName="myContentPresenter" Property="BitmapEffect">
									<Setter.Value>
										<BlurBitmapEffect Radius="1" />
									</Setter.Value>
								</Setter>
							</Trigger>
							<!-- Set properties when button has focus. -->
							<Trigger Property="IsFocused" Value="True">
								<!-- Change the color of the outer rectangle when user          mouses over it. -->
								<Setter TargetName="outerRectangle" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								<!-- Sets the glass opacity to 1, therefore, the          glass "appears" when user mouses over it. -->
								<Setter TargetName="glassRectangle" Property="Opacity" Value="1" />
							</Trigger>
							<!-- Animations that start when mouse enters and leaves button. -->
							<EventTrigger RoutedEvent="Mouse.MouseEnter">
								<EventTrigger.Actions>
									<BeginStoryboard Name="mouseEnterBeginStoryboard">
										<Storyboard>
											<!-- This animation makes the glass rectangle shrink in the X direction. -->
											<DoubleAnimation
												Storyboard.TargetName="glassRectangle"
												Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
												By="-0.1" 
												Duration="0:0:0.5" />
											<!-- This animation makes the glass rectangle shrink in the Y direction. -->
											<DoubleAnimation
												Storyboard.TargetName="glassRectangle"
												Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
												By="-0.1"
												Duration="0:0:0.5" />
										</Storyboard>
									</BeginStoryboard>
								</EventTrigger.Actions>
							</EventTrigger>
							<EventTrigger RoutedEvent="Mouse.MouseLeave">
								<EventTrigger.Actions>
									<!-- Stopping the storyboard sets all animated properties back to default. -->
									<StopStoryboard BeginStoryboardName="mouseEnterBeginStoryboard" />
								</EventTrigger.Actions>
							</EventTrigger>
							<!-- Animation fires when button is clicked, causing glass to spin.  -->
							<EventTrigger RoutedEvent="Button.Click">
								<EventTrigger.Actions>
									<BeginStoryboard>
										<Storyboard>
											<DoubleAnimation
												Storyboard.TargetName="glassRectangle"
												Storyboard.TargetProperty="(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)"
												By="360"
												Duration="0:0:0.5">
											</DoubleAnimation>
										</Storyboard>
									</BeginStoryboard>
								</EventTrigger.Actions>
							</EventTrigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style TargetType="{x:Type TextBox}">
			<Setter Property="Background" Value="{StaticResource GrayBlueBrush}" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TextBox}">
						<Border Background="{TemplateBinding Background}" x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" CornerRadius="5">
							<ScrollViewer x:Name="PART_ContentHost"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="Bd"/>
								<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
							</Trigger>
							<Trigger Property="Width" Value="Auto">
								<Setter Property="MinWidth" Value="100"/>
							</Trigger>
							<Trigger Property="Height" Value="Auto">
								<Setter Property="MinHeight" Value="20"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</Application.Resources>
</Application>
