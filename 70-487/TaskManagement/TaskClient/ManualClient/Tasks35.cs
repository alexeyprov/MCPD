//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaskService.BusinessEntities
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://schemas.datacontract.org/2004/07/TaskService.BusinessEntities")]
    public partial class Task : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AssignedToField;
        
        private System.DateTime DueDateField;
        
        private int TaskNumberField;
        
        private string DescriptionField;
        
        private TaskService.BusinessEntities.TaskStatus StatusField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssignedTo
        {
            get
            {
                return this.AssignedToField;
            }
            set
            {
                this.AssignedToField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DueDate
        {
            get
            {
                return this.DueDateField;
            }
            set
            {
                this.DueDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TaskNumber
        {
            get
            {
                return this.TaskNumberField;
            }
            set
            {
                this.TaskNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public TaskService.BusinessEntities.TaskStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskStatus", Namespace="http://schemas.datacontract.org/2004/07/TaskService.BusinessEntities")]
    public enum TaskStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Assigned = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Overdue = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CompletedOnTime = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CompletedLate = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/TaskService.BusinessEntities")]
    public partial class FaultInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ErrorMessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage
        {
            get
            {
                return this.ErrorMessageField;
            }
            set
            {
                this.ErrorMessageField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://alexeypr.com/2015/05/Tasks", ConfigurationName="TaskService")]
public interface TaskService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/2015/05/Tasks/TaskService/AddTask", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/AddTaskResponse")]
    int AddTask(TaskService.BusinessEntities.Task t);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://alexeypr.com/2015/05/Tasks/TaskService/AddTask", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/AddTaskResponse")]
    System.IAsyncResult BeginAddTask(TaskService.BusinessEntities.Task t, System.AsyncCallback callback, object asyncState);
    
    int EndAddTask(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/2015/05/Tasks/TaskService/GetTask", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/GetTaskResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(TaskService.BusinessEntities.FaultInfo), Action="http://alexeypr.com/2015/05/Tasks/TaskService/GetTaskFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/TaskService.BusinessEntities")]
    TaskService.BusinessEntities.Task GetTask(int taskNumber);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://alexeypr.com/2015/05/Tasks/TaskService/GetTask", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/GetTaskResponse")]
    System.IAsyncResult BeginGetTask(int taskNumber, System.AsyncCallback callback, object asyncState);
    
    TaskService.BusinessEntities.Task EndGetTask(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/2015/05/Tasks/TaskService/AssignTask", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/AssignTaskResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(TaskService.BusinessEntities.FaultInfo), Action="http://alexeypr.com/2015/05/Tasks/TaskService/AssignTaskFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/TaskService.BusinessEntities")]
    void AssignTask(int taskNumber, string owner);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://alexeypr.com/2015/05/Tasks/TaskService/AssignTask", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/AssignTaskResponse")]
    System.IAsyncResult BeginAssignTask(int taskNumber, string owner, System.AsyncCallback callback, object asyncState);
    
    void EndAssignTask(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/2015/05/Tasks/TaskService/GetTasksByOwner", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/GetTasksByOwnerResponse")]
    TaskService.BusinessEntities.Task[] GetTasksByOwner(string owner);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://alexeypr.com/2015/05/Tasks/TaskService/GetTasksByOwner", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/GetTasksByOwnerResponse")]
    System.IAsyncResult BeginGetTasksByOwner(string owner, System.AsyncCallback callback, object asyncState);
    
    TaskService.BusinessEntities.Task[] EndGetTasksByOwner(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/2015/05/Tasks/TaskService/IsTaskCompleted", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/IsTaskCompletedResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(TaskService.BusinessEntities.FaultInfo), Action="http://alexeypr.com/2015/05/Tasks/TaskService/IsTaskCompletedFaultInfoFault", Name="FaultInfo", Namespace="http://schemas.datacontract.org/2004/07/TaskService.BusinessEntities")]
    bool IsTaskCompleted(int taskNumber);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://alexeypr.com/2015/05/Tasks/TaskService/IsTaskCompleted", ReplyAction="http://alexeypr.com/2015/05/Tasks/TaskService/IsTaskCompletedResponse")]
    System.IAsyncResult BeginIsTaskCompleted(int taskNumber, System.AsyncCallback callback, object asyncState);
    
    bool EndIsTaskCompleted(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://alexeypr.com/2015/05/Tasks/TaskService/MarkTaskCompleted")]
    void MarkTaskCompleted(int taskNumber);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://alexeypr.com/2015/05/Tasks/TaskService/MarkTaskCompleted")]
    System.IAsyncResult BeginMarkTaskCompleted(int taskNumber, System.AsyncCallback callback, object asyncState);
    
    void EndMarkTaskCompleted(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://alexeypr.com/2015/05/Tasks/TaskService/DeleteTask")]
    void DeleteTask(int taskNumber);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://alexeypr.com/2015/05/Tasks/TaskService/DeleteTask")]
    System.IAsyncResult BeginDeleteTask(int taskNumber, System.AsyncCallback callback, object asyncState);
    
    void EndDeleteTask(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface TaskServiceChannel : TaskService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class AddTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public AddTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public TaskService.BusinessEntities.Task Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((TaskService.BusinessEntities.Task)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetTasksByOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetTasksByOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public TaskService.BusinessEntities.Task[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((TaskService.BusinessEntities.Task[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class IsTaskCompletedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public IsTaskCompletedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public bool Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TaskServiceClient : System.ServiceModel.ClientBase<TaskService>, TaskService
{
    
    private BeginOperationDelegate onBeginAddTaskDelegate;
    
    private EndOperationDelegate onEndAddTaskDelegate;
    
    private System.Threading.SendOrPostCallback onAddTaskCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetTaskDelegate;
    
    private EndOperationDelegate onEndGetTaskDelegate;
    
    private System.Threading.SendOrPostCallback onGetTaskCompletedDelegate;
    
    private BeginOperationDelegate onBeginAssignTaskDelegate;
    
    private EndOperationDelegate onEndAssignTaskDelegate;
    
    private System.Threading.SendOrPostCallback onAssignTaskCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetTasksByOwnerDelegate;
    
    private EndOperationDelegate onEndGetTasksByOwnerDelegate;
    
    private System.Threading.SendOrPostCallback onGetTasksByOwnerCompletedDelegate;
    
    private BeginOperationDelegate onBeginIsTaskCompletedDelegate;
    
    private EndOperationDelegate onEndIsTaskCompletedDelegate;
    
    private System.Threading.SendOrPostCallback onIsTaskCompletedCompletedDelegate;
    
    private BeginOperationDelegate onBeginMarkTaskCompletedDelegate;
    
    private EndOperationDelegate onEndMarkTaskCompletedDelegate;
    
    private System.Threading.SendOrPostCallback onMarkTaskCompletedCompletedDelegate;
    
    private BeginOperationDelegate onBeginDeleteTaskDelegate;
    
    private EndOperationDelegate onEndDeleteTaskDelegate;
    
    private System.Threading.SendOrPostCallback onDeleteTaskCompletedDelegate;
    
    public TaskServiceClient()
    {
    }
    
    public TaskServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public event System.EventHandler<AddTaskCompletedEventArgs> AddTaskCompleted;
    
    public event System.EventHandler<GetTaskCompletedEventArgs> GetTaskCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AssignTaskCompleted;
    
    public event System.EventHandler<GetTasksByOwnerCompletedEventArgs> GetTasksByOwnerCompleted;
    
    public event System.EventHandler<IsTaskCompletedCompletedEventArgs> IsTaskCompletedCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MarkTaskCompletedCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteTaskCompleted;
    
    public int AddTask(TaskService.BusinessEntities.Task t)
    {
        return base.Channel.AddTask(t);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginAddTask(TaskService.BusinessEntities.Task t, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAddTask(t, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public int EndAddTask(System.IAsyncResult result)
    {
        return base.Channel.EndAddTask(result);
    }
    
    private System.IAsyncResult OnBeginAddTask(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        TaskService.BusinessEntities.Task t = ((TaskService.BusinessEntities.Task)(inValues[0]));
        return this.BeginAddTask(t, callback, asyncState);
    }
    
    private object[] OnEndAddTask(System.IAsyncResult result)
    {
        int retVal = this.EndAddTask(result);
        return new object[] {
                retVal};
    }
    
    private void OnAddTaskCompleted(object state)
    {
        if ((this.AddTaskCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddTaskCompleted(this, new AddTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AddTaskAsync(TaskService.BusinessEntities.Task t)
    {
        this.AddTaskAsync(t, null);
    }
    
    public void AddTaskAsync(TaskService.BusinessEntities.Task t, object userState)
    {
        if ((this.onBeginAddTaskDelegate == null))
        {
            this.onBeginAddTaskDelegate = new BeginOperationDelegate(this.OnBeginAddTask);
        }
        if ((this.onEndAddTaskDelegate == null))
        {
            this.onEndAddTaskDelegate = new EndOperationDelegate(this.OnEndAddTask);
        }
        if ((this.onAddTaskCompletedDelegate == null))
        {
            this.onAddTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTaskCompleted);
        }
        base.InvokeAsync(this.onBeginAddTaskDelegate, new object[] {
                    t}, this.onEndAddTaskDelegate, this.onAddTaskCompletedDelegate, userState);
    }
    
    public TaskService.BusinessEntities.Task GetTask(int taskNumber)
    {
        return base.Channel.GetTask(taskNumber);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginGetTask(int taskNumber, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetTask(taskNumber, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public TaskService.BusinessEntities.Task EndGetTask(System.IAsyncResult result)
    {
        return base.Channel.EndGetTask(result);
    }
    
    private System.IAsyncResult OnBeginGetTask(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int taskNumber = ((int)(inValues[0]));
        return this.BeginGetTask(taskNumber, callback, asyncState);
    }
    
    private object[] OnEndGetTask(System.IAsyncResult result)
    {
        TaskService.BusinessEntities.Task retVal = this.EndGetTask(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetTaskCompleted(object state)
    {
        if ((this.GetTaskCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetTaskCompleted(this, new GetTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetTaskAsync(int taskNumber)
    {
        this.GetTaskAsync(taskNumber, null);
    }
    
    public void GetTaskAsync(int taskNumber, object userState)
    {
        if ((this.onBeginGetTaskDelegate == null))
        {
            this.onBeginGetTaskDelegate = new BeginOperationDelegate(this.OnBeginGetTask);
        }
        if ((this.onEndGetTaskDelegate == null))
        {
            this.onEndGetTaskDelegate = new EndOperationDelegate(this.OnEndGetTask);
        }
        if ((this.onGetTaskCompletedDelegate == null))
        {
            this.onGetTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTaskCompleted);
        }
        base.InvokeAsync(this.onBeginGetTaskDelegate, new object[] {
                    taskNumber}, this.onEndGetTaskDelegate, this.onGetTaskCompletedDelegate, userState);
    }
    
    public void AssignTask(int taskNumber, string owner)
    {
        base.Channel.AssignTask(taskNumber, owner);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginAssignTask(int taskNumber, string owner, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAssignTask(taskNumber, owner, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public void EndAssignTask(System.IAsyncResult result)
    {
        base.Channel.EndAssignTask(result);
    }
    
    private System.IAsyncResult OnBeginAssignTask(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int taskNumber = ((int)(inValues[0]));
        string owner = ((string)(inValues[1]));
        return this.BeginAssignTask(taskNumber, owner, callback, asyncState);
    }
    
    private object[] OnEndAssignTask(System.IAsyncResult result)
    {
        this.EndAssignTask(result);
        return null;
    }
    
    private void OnAssignTaskCompleted(object state)
    {
        if ((this.AssignTaskCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AssignTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AssignTaskAsync(int taskNumber, string owner)
    {
        this.AssignTaskAsync(taskNumber, owner, null);
    }
    
    public void AssignTaskAsync(int taskNumber, string owner, object userState)
    {
        if ((this.onBeginAssignTaskDelegate == null))
        {
            this.onBeginAssignTaskDelegate = new BeginOperationDelegate(this.OnBeginAssignTask);
        }
        if ((this.onEndAssignTaskDelegate == null))
        {
            this.onEndAssignTaskDelegate = new EndOperationDelegate(this.OnEndAssignTask);
        }
        if ((this.onAssignTaskCompletedDelegate == null))
        {
            this.onAssignTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssignTaskCompleted);
        }
        base.InvokeAsync(this.onBeginAssignTaskDelegate, new object[] {
                    taskNumber,
                    owner}, this.onEndAssignTaskDelegate, this.onAssignTaskCompletedDelegate, userState);
    }
    
    public TaskService.BusinessEntities.Task[] GetTasksByOwner(string owner)
    {
        return base.Channel.GetTasksByOwner(owner);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginGetTasksByOwner(string owner, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetTasksByOwner(owner, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public TaskService.BusinessEntities.Task[] EndGetTasksByOwner(System.IAsyncResult result)
    {
        return base.Channel.EndGetTasksByOwner(result);
    }
    
    private System.IAsyncResult OnBeginGetTasksByOwner(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string owner = ((string)(inValues[0]));
        return this.BeginGetTasksByOwner(owner, callback, asyncState);
    }
    
    private object[] OnEndGetTasksByOwner(System.IAsyncResult result)
    {
        TaskService.BusinessEntities.Task[] retVal = this.EndGetTasksByOwner(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetTasksByOwnerCompleted(object state)
    {
        if ((this.GetTasksByOwnerCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetTasksByOwnerCompleted(this, new GetTasksByOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetTasksByOwnerAsync(string owner)
    {
        this.GetTasksByOwnerAsync(owner, null);
    }
    
    public void GetTasksByOwnerAsync(string owner, object userState)
    {
        if ((this.onBeginGetTasksByOwnerDelegate == null))
        {
            this.onBeginGetTasksByOwnerDelegate = new BeginOperationDelegate(this.OnBeginGetTasksByOwner);
        }
        if ((this.onEndGetTasksByOwnerDelegate == null))
        {
            this.onEndGetTasksByOwnerDelegate = new EndOperationDelegate(this.OnEndGetTasksByOwner);
        }
        if ((this.onGetTasksByOwnerCompletedDelegate == null))
        {
            this.onGetTasksByOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTasksByOwnerCompleted);
        }
        base.InvokeAsync(this.onBeginGetTasksByOwnerDelegate, new object[] {
                    owner}, this.onEndGetTasksByOwnerDelegate, this.onGetTasksByOwnerCompletedDelegate, userState);
    }
    
    public bool IsTaskCompleted(int taskNumber)
    {
        return base.Channel.IsTaskCompleted(taskNumber);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginIsTaskCompleted(int taskNumber, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginIsTaskCompleted(taskNumber, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public bool EndIsTaskCompleted(System.IAsyncResult result)
    {
        return base.Channel.EndIsTaskCompleted(result);
    }
    
    private System.IAsyncResult OnBeginIsTaskCompleted(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int taskNumber = ((int)(inValues[0]));
        return this.BeginIsTaskCompleted(taskNumber, callback, asyncState);
    }
    
    private object[] OnEndIsTaskCompleted(System.IAsyncResult result)
    {
        bool retVal = this.EndIsTaskCompleted(result);
        return new object[] {
                retVal};
    }
    
    private void OnIsTaskCompletedCompleted(object state)
    {
        if ((this.IsTaskCompletedCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.IsTaskCompletedCompleted(this, new IsTaskCompletedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void IsTaskCompletedAsync(int taskNumber)
    {
        this.IsTaskCompletedAsync(taskNumber, null);
    }
    
    public void IsTaskCompletedAsync(int taskNumber, object userState)
    {
        if ((this.onBeginIsTaskCompletedDelegate == null))
        {
            this.onBeginIsTaskCompletedDelegate = new BeginOperationDelegate(this.OnBeginIsTaskCompleted);
        }
        if ((this.onEndIsTaskCompletedDelegate == null))
        {
            this.onEndIsTaskCompletedDelegate = new EndOperationDelegate(this.OnEndIsTaskCompleted);
        }
        if ((this.onIsTaskCompletedCompletedDelegate == null))
        {
            this.onIsTaskCompletedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsTaskCompletedCompleted);
        }
        base.InvokeAsync(this.onBeginIsTaskCompletedDelegate, new object[] {
                    taskNumber}, this.onEndIsTaskCompletedDelegate, this.onIsTaskCompletedCompletedDelegate, userState);
    }
    
    public void MarkTaskCompleted(int taskNumber)
    {
        base.Channel.MarkTaskCompleted(taskNumber);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginMarkTaskCompleted(int taskNumber, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginMarkTaskCompleted(taskNumber, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public void EndMarkTaskCompleted(System.IAsyncResult result)
    {
        base.Channel.EndMarkTaskCompleted(result);
    }
    
    private System.IAsyncResult OnBeginMarkTaskCompleted(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int taskNumber = ((int)(inValues[0]));
        return this.BeginMarkTaskCompleted(taskNumber, callback, asyncState);
    }
    
    private object[] OnEndMarkTaskCompleted(System.IAsyncResult result)
    {
        this.EndMarkTaskCompleted(result);
        return null;
    }
    
    private void OnMarkTaskCompletedCompleted(object state)
    {
        if ((this.MarkTaskCompletedCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.MarkTaskCompletedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void MarkTaskCompletedAsync(int taskNumber)
    {
        this.MarkTaskCompletedAsync(taskNumber, null);
    }
    
    public void MarkTaskCompletedAsync(int taskNumber, object userState)
    {
        if ((this.onBeginMarkTaskCompletedDelegate == null))
        {
            this.onBeginMarkTaskCompletedDelegate = new BeginOperationDelegate(this.OnBeginMarkTaskCompleted);
        }
        if ((this.onEndMarkTaskCompletedDelegate == null))
        {
            this.onEndMarkTaskCompletedDelegate = new EndOperationDelegate(this.OnEndMarkTaskCompleted);
        }
        if ((this.onMarkTaskCompletedCompletedDelegate == null))
        {
            this.onMarkTaskCompletedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMarkTaskCompletedCompleted);
        }
        base.InvokeAsync(this.onBeginMarkTaskCompletedDelegate, new object[] {
                    taskNumber}, this.onEndMarkTaskCompletedDelegate, this.onMarkTaskCompletedCompletedDelegate, userState);
    }
    
    public void DeleteTask(int taskNumber)
    {
        base.Channel.DeleteTask(taskNumber);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public System.IAsyncResult BeginDeleteTask(int taskNumber, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginDeleteTask(taskNumber, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    public void EndDeleteTask(System.IAsyncResult result)
    {
        base.Channel.EndDeleteTask(result);
    }
    
    private System.IAsyncResult OnBeginDeleteTask(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int taskNumber = ((int)(inValues[0]));
        return this.BeginDeleteTask(taskNumber, callback, asyncState);
    }
    
    private object[] OnEndDeleteTask(System.IAsyncResult result)
    {
        this.EndDeleteTask(result);
        return null;
    }
    
    private void OnDeleteTaskCompleted(object state)
    {
        if ((this.DeleteTaskCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.DeleteTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void DeleteTaskAsync(int taskNumber)
    {
        this.DeleteTaskAsync(taskNumber, null);
    }
    
    public void DeleteTaskAsync(int taskNumber, object userState)
    {
        if ((this.onBeginDeleteTaskDelegate == null))
        {
            this.onBeginDeleteTaskDelegate = new BeginOperationDelegate(this.OnBeginDeleteTask);
        }
        if ((this.onEndDeleteTaskDelegate == null))
        {
            this.onEndDeleteTaskDelegate = new EndOperationDelegate(this.OnEndDeleteTask);
        }
        if ((this.onDeleteTaskCompletedDelegate == null))
        {
            this.onDeleteTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTaskCompleted);
        }
        base.InvokeAsync(this.onBeginDeleteTaskDelegate, new object[] {
                    taskNumber}, this.onEndDeleteTaskDelegate, this.onDeleteTaskCompletedDelegate, userState);
    }
}
