//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFTestClient.AuditedContentManagerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinkItem", Namespace="http://alexeypr.com/Versioning/2015/12")]
    [System.SerializableAttribute()]
    public partial class LinkItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        private string UrlField;
        
        private System.DateTime StartDateField;
        
        private System.DateTime EndDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=3)]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=4)]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true, Order=5)]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://alexeypr.com/Versioning/2015/10", ConfigurationName="AuditedContentManagerService.AuditedContentManagerContract")]
    public interface AuditedContentManagerContract {
        
        // CODEGEN: Generating message contract since the operation GetLinkItem is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/GetLinkItem", ReplyAction="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/GetLinkItemR" +
            "esponse")]
        WCFTestClient.AuditedContentManagerService.AuditedLinkItem GetLinkItem(WCFTestClient.AuditedContentManagerService.LinkItemId request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/GetLinkItem", ReplyAction="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/GetLinkItemR" +
            "esponse")]
        System.Threading.Tasks.Task<WCFTestClient.AuditedContentManagerService.AuditedLinkItem> GetLinkItemAsync(WCFTestClient.AuditedContentManagerService.LinkItemId request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/UpdateLinkIt" +
            "em", ReplyAction="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/UpdateLinkIt" +
            "emResponse")]
        WCFTestClient.AuditedContentManagerService.AuditedLinkItem UpdateLinkItem(WCFTestClient.AuditedContentManagerService.AuditedLinkItem request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/UpdateLinkIt" +
            "em", ReplyAction="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/UpdateLinkIt" +
            "emResponse")]
        System.Threading.Tasks.Task<WCFTestClient.AuditedContentManagerService.AuditedLinkItem> UpdateLinkItemAsync(WCFTestClient.AuditedContentManagerService.AuditedLinkItem request);
        
        // CODEGEN: Generating message contract since the operation DeleteLinkItem is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/DeleteLinkIt" +
            "em", ReplyAction="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/DeleteLinkIt" +
            "emResponse")]
        WCFTestClient.AuditedContentManagerService.DeleteLinkItemResponse DeleteLinkItem(WCFTestClient.AuditedContentManagerService.AuditedLinkItem request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/DeleteLinkIt" +
            "em", ReplyAction="http://alexeypr.com/Versioning/2015/10/AuditedContentManagerContract/DeleteLinkIt" +
            "emResponse")]
        System.Threading.Tasks.Task<WCFTestClient.AuditedContentManagerService.DeleteLinkItemResponse> DeleteLinkItemAsync(WCFTestClient.AuditedContentManagerService.AuditedLinkItem request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class LinkItemId {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://alexeypr.com/Versioning/2015/10", Order=0)]
        public int Id;
        
        public LinkItemId() {
        }
        
        public LinkItemId(int Id) {
            this.Id = Id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AuditedLinkItem {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://alexeypr.com/Versioning/2015/10")]
        public string LastModifiedBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://alexeypr.com/Versioning/2015/10", Order=0)]
        public WCFTestClient.AuditedContentManagerService.LinkItem LinkItem;
        
        public AuditedLinkItem() {
        }
        
        public AuditedLinkItem(string LastModifiedBy, WCFTestClient.AuditedContentManagerService.LinkItem LinkItem) {
            this.LastModifiedBy = LastModifiedBy;
            this.LinkItem = LinkItem;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteLinkItemResponse {
        
        public DeleteLinkItemResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AuditedContentManagerContractChannel : WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuditedContentManagerContractClient : System.ServiceModel.ClientBase<WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract>, WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract {
        
        public AuditedContentManagerContractClient() {
        }
        
        public AuditedContentManagerContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuditedContentManagerContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuditedContentManagerContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuditedContentManagerContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WCFTestClient.AuditedContentManagerService.AuditedLinkItem WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract.GetLinkItem(WCFTestClient.AuditedContentManagerService.LinkItemId request) {
            return base.Channel.GetLinkItem(request);
        }
        
        public string GetLinkItem(int Id, out WCFTestClient.AuditedContentManagerService.LinkItem LinkItem) {
            WCFTestClient.AuditedContentManagerService.LinkItemId inValue = new WCFTestClient.AuditedContentManagerService.LinkItemId();
            inValue.Id = Id;
            WCFTestClient.AuditedContentManagerService.AuditedLinkItem retVal = ((WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract)(this)).GetLinkItem(inValue);
            LinkItem = retVal.LinkItem;
            return retVal.LastModifiedBy;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WCFTestClient.AuditedContentManagerService.AuditedLinkItem> WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract.GetLinkItemAsync(WCFTestClient.AuditedContentManagerService.LinkItemId request) {
            return base.Channel.GetLinkItemAsync(request);
        }
        
        public System.Threading.Tasks.Task<WCFTestClient.AuditedContentManagerService.AuditedLinkItem> GetLinkItemAsync(int Id) {
            WCFTestClient.AuditedContentManagerService.LinkItemId inValue = new WCFTestClient.AuditedContentManagerService.LinkItemId();
            inValue.Id = Id;
            return ((WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract)(this)).GetLinkItemAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WCFTestClient.AuditedContentManagerService.AuditedLinkItem WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract.UpdateLinkItem(WCFTestClient.AuditedContentManagerService.AuditedLinkItem request) {
            return base.Channel.UpdateLinkItem(request);
        }
        
        public void UpdateLinkItem(ref string LastModifiedBy, ref WCFTestClient.AuditedContentManagerService.LinkItem LinkItem) {
            WCFTestClient.AuditedContentManagerService.AuditedLinkItem inValue = new WCFTestClient.AuditedContentManagerService.AuditedLinkItem();
            inValue.LastModifiedBy = LastModifiedBy;
            inValue.LinkItem = LinkItem;
            WCFTestClient.AuditedContentManagerService.AuditedLinkItem retVal = ((WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract)(this)).UpdateLinkItem(inValue);
            LastModifiedBy = retVal.LastModifiedBy;
            LinkItem = retVal.LinkItem;
        }
        
        public System.Threading.Tasks.Task<WCFTestClient.AuditedContentManagerService.AuditedLinkItem> UpdateLinkItemAsync(WCFTestClient.AuditedContentManagerService.AuditedLinkItem request) {
            return base.Channel.UpdateLinkItemAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WCFTestClient.AuditedContentManagerService.DeleteLinkItemResponse WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract.DeleteLinkItem(WCFTestClient.AuditedContentManagerService.AuditedLinkItem request) {
            return base.Channel.DeleteLinkItem(request);
        }
        
        public void DeleteLinkItem(string LastModifiedBy, WCFTestClient.AuditedContentManagerService.LinkItem LinkItem) {
            WCFTestClient.AuditedContentManagerService.AuditedLinkItem inValue = new WCFTestClient.AuditedContentManagerService.AuditedLinkItem();
            inValue.LastModifiedBy = LastModifiedBy;
            inValue.LinkItem = LinkItem;
            WCFTestClient.AuditedContentManagerService.DeleteLinkItemResponse retVal = ((WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract)(this)).DeleteLinkItem(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WCFTestClient.AuditedContentManagerService.DeleteLinkItemResponse> WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract.DeleteLinkItemAsync(WCFTestClient.AuditedContentManagerService.AuditedLinkItem request) {
            return base.Channel.DeleteLinkItemAsync(request);
        }
        
        public System.Threading.Tasks.Task<WCFTestClient.AuditedContentManagerService.DeleteLinkItemResponse> DeleteLinkItemAsync(string LastModifiedBy, WCFTestClient.AuditedContentManagerService.LinkItem LinkItem) {
            WCFTestClient.AuditedContentManagerService.AuditedLinkItem inValue = new WCFTestClient.AuditedContentManagerService.AuditedLinkItem();
            inValue.LastModifiedBy = LastModifiedBy;
            inValue.LinkItem = LinkItem;
            return ((WCFTestClient.AuditedContentManagerService.AuditedContentManagerContract)(this)).DeleteLinkItemAsync(inValue);
        }
    }
}
