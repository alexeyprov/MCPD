//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdventureWorks.Data.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Counterparty> Counterparties { get; set; }
        public virtual DbSet<CounterpartyAddress> CounterpartyAddresses { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeDepartmentHistory> EmployeeDepartmentHistories { get; set; }
        public virtual DbSet<EmployeePayHistory> EmployeePayHistories { get; set; }
        public virtual DbSet<JobCandidate> JobCandidates { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ContactType> ContactTypes { get; set; }
        public virtual DbSet<CountryRegion> CountryRegions { get; set; }
        public virtual DbSet<StateProvince> StateProvinces { get; set; }
        public virtual DbSet<BillOfMaterial> BillOfMaterials { get; set; }
        public virtual DbSet<Culture> Cultures { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Illustration> Illustrations { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductCostHistory> ProductCostHistories { get; set; }
        public virtual DbSet<ProductDescription> ProductDescriptions { get; set; }
        public virtual DbSet<ProductDocument> ProductDocuments { get; set; }
        public virtual DbSet<ProductInventory> ProductInventories { get; set; }
        public virtual DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; }
        public virtual DbSet<ProductModel> ProductModels { get; set; }
        public virtual DbSet<ProductModelIllustration> ProductModelIllustrations { get; set; }
        public virtual DbSet<ProductModelProductDescriptionCulture> ProductModelProductDescriptionCultures { get; set; }
        public virtual DbSet<ProductPhoto> ProductPhotoes { get; set; }
        public virtual DbSet<ProductProductPhoto> ProductProductPhotoes { get; set; }
        public virtual DbSet<ProductReview> ProductReviews { get; set; }
        public virtual DbSet<ProductSubcategory> ProductSubcategories { get; set; }
        public virtual DbSet<ScrapReason> ScrapReasons { get; set; }
        public virtual DbSet<TransactionHistory> TransactionHistories { get; set; }
        public virtual DbSet<TransactionHistoryArchive> TransactionHistoryArchives { get; set; }
        public virtual DbSet<UnitMeasure> UnitMeasures { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<WorkOrderRouting> WorkOrderRoutings { get; set; }
        public virtual DbSet<ProductVendor> ProductVendors { get; set; }
        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public virtual DbSet<ShipMethod> ShipMethods { get; set; }
        public virtual DbSet<VendorContact> VendorContacts { get; set; }
        public virtual DbSet<ContactCreditCard> ContactCreditCards { get; set; }
        public virtual DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; }
        public virtual DbSet<CreditCard> CreditCards { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }
        public virtual DbSet<Individual> Individuals { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public virtual DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; }
        public virtual DbSet<SalesPerson> SalesPersons { get; set; }
        public virtual DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }
        public virtual DbSet<SalesReason> SalesReasons { get; set; }
        public virtual DbSet<SalesTaxRate> SalesTaxRates { get; set; }
        public virtual DbSet<SalesTerritory> SalesTerritories { get; set; }
        public virtual DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; }
        public virtual DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }
        public virtual DbSet<SpecialOffer> SpecialOffers { get; set; }
        public virtual DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<StoreContact> StoreContacts { get; set; }
        public virtual DbSet<IndividualCustomer> IndividualCustomers { get; set; }
    
        public virtual int DeleteAddress(Nullable<int> addressId, Nullable<System.DateTime> modifiedDate)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("addressId", addressId) :
                new ObjectParameter("addressId", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAddress", addressIdParameter, modifiedDateParameter);
        }
    
        public virtual int DeleteContact(Nullable<int> contactId, Nullable<System.DateTime> modifiedDate)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteContact", contactIdParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<InsertAddressResult> InsertAddress(string addressLine1, string addressLine2, string city, Nullable<int> stateProvinceID, string postalCode)
        {
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("addressLine1", addressLine1) :
                new ObjectParameter("addressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("addressLine2", addressLine2) :
                new ObjectParameter("addressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateProvinceIDParameter = stateProvinceID.HasValue ?
                new ObjectParameter("stateProvinceID", stateProvinceID) :
                new ObjectParameter("stateProvinceID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("postalCode", postalCode) :
                new ObjectParameter("postalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertAddressResult>("InsertAddress", addressLine1Parameter, addressLine2Parameter, cityParameter, stateProvinceIDParameter, postalCodeParameter);
        }
    
        public virtual ObjectResult<InsertContactResult> InsertContact(Nullable<bool> nameStyle, string title, string firstName, string middleName, string lastName, string suffix, string emailAddress, Nullable<int> emailPromotion, string phone, string passwordHash, string passwordSalt, string additionalContactInfo)
        {
            var nameStyleParameter = nameStyle.HasValue ?
                new ObjectParameter("nameStyle", nameStyle) :
                new ObjectParameter("nameStyle", typeof(bool));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("middleName", middleName) :
                new ObjectParameter("middleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("emailAddress", emailAddress) :
                new ObjectParameter("emailAddress", typeof(string));
    
            var emailPromotionParameter = emailPromotion.HasValue ?
                new ObjectParameter("emailPromotion", emailPromotion) :
                new ObjectParameter("emailPromotion", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("passwordHash", passwordHash) :
                new ObjectParameter("passwordHash", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("passwordSalt", passwordSalt) :
                new ObjectParameter("passwordSalt", typeof(string));
    
            var additionalContactInfoParameter = additionalContactInfo != null ?
                new ObjectParameter("additionalContactInfo", additionalContactInfo) :
                new ObjectParameter("additionalContactInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertContactResult>("InsertContact", nameStyleParameter, titleParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, emailAddressParameter, emailPromotionParameter, phoneParameter, passwordHashParameter, passwordSaltParameter, additionalContactInfoParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> UpdateAddress(Nullable<int> addressId, string addressLine1, string addressLine2, string city, Nullable<int> stateProvinceID, string postalCode, Nullable<System.DateTime> modifiedDate, ObjectParameter rowsUpdated)
        {
            var addressIdParameter = addressId.HasValue ?
                new ObjectParameter("addressId", addressId) :
                new ObjectParameter("addressId", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("addressLine1", addressLine1) :
                new ObjectParameter("addressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("addressLine2", addressLine2) :
                new ObjectParameter("addressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateProvinceIDParameter = stateProvinceID.HasValue ?
                new ObjectParameter("stateProvinceID", stateProvinceID) :
                new ObjectParameter("stateProvinceID", typeof(int));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("postalCode", postalCode) :
                new ObjectParameter("postalCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("UpdateAddress", addressIdParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, stateProvinceIDParameter, postalCodeParameter, modifiedDateParameter, rowsUpdated);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> UpdateContact(Nullable<int> contactId, Nullable<bool> nameStyle, string title, string firstName, string middleName, string lastName, string suffix, string emailAddress, Nullable<int> emailPromotion, string phone, string passwordHash, string passwordSalt, string additionalContactInfo, Nullable<System.DateTime> modifiedDate, ObjectParameter rowsUpdated)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var nameStyleParameter = nameStyle.HasValue ?
                new ObjectParameter("nameStyle", nameStyle) :
                new ObjectParameter("nameStyle", typeof(bool));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("middleName", middleName) :
                new ObjectParameter("middleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("emailAddress", emailAddress) :
                new ObjectParameter("emailAddress", typeof(string));
    
            var emailPromotionParameter = emailPromotion.HasValue ?
                new ObjectParameter("emailPromotion", emailPromotion) :
                new ObjectParameter("emailPromotion", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("passwordHash", passwordHash) :
                new ObjectParameter("passwordHash", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("passwordSalt", passwordSalt) :
                new ObjectParameter("passwordSalt", typeof(string));
    
            var additionalContactInfoParameter = additionalContactInfo != null ?
                new ObjectParameter("additionalContactInfo", additionalContactInfo) :
                new ObjectParameter("additionalContactInfo", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("UpdateContact", contactIdParameter, nameStyleParameter, titleParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, emailAddressParameter, emailPromotionParameter, phoneParameter, passwordHashParameter, passwordSaltParameter, additionalContactInfoParameter, modifiedDateParameter, rowsUpdated);
        }
    
        [DbFunction("Entities", "GetContactInformation")]
        public virtual IQueryable<ContactInformation> GetContactInformation(Nullable<int> contactID)
        {
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ContactInformation>("[Entities].[GetContactInformation](@ContactID)", contactIDParameter);
        }
    }
}
